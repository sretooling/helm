#!/usr/bin/env python3

import click
import coloredlogs
import logging
import requests
import sys
import time

# configs for colored logging
coloredlogs.install(
    level="INFO",
    fmt="%(asctime)s %(message)s"
)


@click.command()
@click.option("--container", default="sample-spring", help="Container name (NOTE.. not pod or deployment)")
@click.option("--delay", default=10, help="Delay between attempts")
@click.option("--namespace", default="dev", help="Namespace to search")
@click.option("--prometheus", default="https://prometheus.example.com", help="URL of prometheus endpoint")
@click.option("--tag", default='latest', help="Desired tag")
@click.option("--timeout", default=300, help="How long to keep trying for?")
def validate_tags(namespace, container, tag, prometheus, timeout, delay):

    # script start time
    start = time.time()
    # calculate the scripts "deadline".. we'll exit at this point
    deadline = start + int(timeout)
    # NOTE: assumes kube-state-metrics
    query = "count(kube_pod_container_info{{namespace='{}',container='{}'}}) by (image)".format(
            namespace,
            container
    )
    # final constructed URL
    url = '{}/api/v1/query?query={}'.format(prometheus, query)

    msg = """[-] validating deployment with the following parameters:
---
[>] prometheus: {}
[>] containers: {}
[>] namespace: {}
[>] tag: {}
---
[>] query: {}
[>] url: {}
---""".format(
        prometheus,
        container,
        namespace,
        tag,
        query,
        url)

    logging.info(msg)

    while time.time() < deadline:

        try:
            response = requests.get(url)
        except requests.exceptions.RequestException as e:
            logging.error(e)
            sys.exit(1)

        if response.status_code != 200:
            logging.error("[!] request failed (didn't get a 200)".format(
                url))
        elif response.status_code == 400:
            logging.error("[!] http 400 received from prometheus (bad query)")
            logging.debug(response.text)
            sys.exit(1)
        else:
            json_data = response.json()
            metrics = json_data['data']['result']
            tags = list(map(lambda x: x['metric']['image'].split(":")[1], metrics))
            # Now we must make some assumptions
            # 1. There is ONLY supposed to be on deployed container matching your tag
            #    as a rollout/deploy occurs two tags will exist
            #    if that is a success you're new deployment will be enforced and the old
            #    replica-set (rc) will get deleted..
            #
            # TL;DR
            # This falls over if you have more than 1 deployment in the destination namespace
            # that is using other tags than the one we're querying for
            # Its possible to get around this with more elegant queries
            #
            # 0 results.. there are no containers matching your query.. ensure u match the container name..
            #   not pod/deploy name
            # 1 result.. a graceful rollout was successful and only 1 deployed tag exists
            # 2 (upwards).. mixed states.. failed deployment, other (same named) containers in other deployments etc..

            if len(tags) == 0:
                logging.error("[!] failed... there are no containers:{}, in namespace: {} with tag: {}".format(
                    container,
                    namespace,
                    tag)
                )

            if len(tags) == 1:
                if tags[0] != tag:
                    logging.error("[!] active tag: '{}' != '{}' .. maybe the deployment didn't happen yet?".format(
                        tags[0], tag))
                else:
                    logging.info("[*] GOOD.. active tag: '{}' == '{}' .. ".format(
                        tags[0], tag))
                    # script end time
                    end = time.time()
                    logging.info("[-] time taken: {}s".format(end - start))
                    logging.debug(response.text)
                    sys.exit(0)
            if len(tags) > 1:
                logging.error("""
                    [!] there are multiple tags deployed with this namespace/container combo
                    [!] namely: {}""".format(
                    str(tags)))

        time.sleep(delay)

    logging.error("[!] failed... script timed out after {}s (use --timeout to extend)".format(
        timeout))
    sys.exit(1)


if __name__ == '__main__':
    validate_tags()
